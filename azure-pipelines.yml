# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - 'azureinfra/*'

variables:
  # There must be an Azure Service Connection with that name defined in your Azure DevOps settings. See https://docs.microsoft.com/en-us/azure/devops/pipelines/library/connect-to-azure?view=azure-devops
  serviceConnection: 'terraform-basic-testing-azure-connection'
  azureLocation: 'southindia'
  # Terraform settings
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)/azureinfra'
  terraformVersion: '1.0.1'

stages:
  - stage: TerraformContinuousIntegration
    displayName: Terraform Module - CI
    jobs:
    - job: TerraformContinuousIntegrationJob
      displayName: SeyonTerraformContinuousIntegration - CI Job
      pool:
        name: seyonpool
      steps:
      # Step 1: run the Checkov Static Code Analysis
      - bash: $(terraformWorkingDirectory)/checkov.sh $(terraformWorkingDirectory)
        displayName: Checkov Static Code Analysis
      # Step 2: install Terraform on the Azure Pipelines agent
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: $(terraformVersion)
      # Step 3: run Terraform init to initialize the workspace
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: 'Run terraform init'
        inputs:
          command: init
          workingDirectory: $(terraformWorkingDirectory)
      # Step 4: run Terraform validate to validate HCL syntax
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: 'Run terraform validate'
        inputs:
          command: validate
          workingDirectory: $(terraformWorkingDirectory)
      # Step 5: run Terraform plan to validate HCL syntax
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: 'Run terraform plan'
        inputs:
          command: plan
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceName: $(serviceConnection)
        # Step 6: run Terraform apply to validate HCL syntax  
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: 'Run terraform apply'
        inputs:
          command: apply
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceName: $(serviceConnection)
          
             # Step 7: run Terraform destory to validate HCL syntax  
      #- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      #  displayName: 'Run terraform destroy'
      #  inputs:
      #    command: destroy
      #    workingDirectory: $(terraformWorkingDirectory)
      #    environmentServiceName: $(serviceConnection)
          
